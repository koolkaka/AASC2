import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  Query,
  HttpException,
  HttpStatus,
  Logger,
  UseGuards,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiQuery,
  ApiBearerAuth,
  ApiBody,
} from '@nestjs/swagger';
import { ContactsService } from './contacts.service';
import { CreateContactDto } from './dto/create-contact.dto';
import { UpdateContactDto } from './dto/update-contact.dto';
import { ContactQueryDto } from './dto/contact-query.dto';
import { ContactResponse, ContactListResponse } from './interfaces/contact.interface';

@ApiTags('Contacts')
@Controller('contacts')
export class ContactsController {
  private readonly logger = new Logger(ContactsController.name);

  constructor(private readonly contactsService: ContactsService) {}

  /**
   * L·∫•y danh s√°ch contacts t·ª´ Bitrix24
   */
  @Get()
  @ApiOperation({ 
    summary: 'L·∫•y danh s√°ch contacts',
    description: 'L·∫•y danh s√°ch contacts t·ª´ Bitrix24 v·ªõi ph√¢n trang v√† t√¨m ki·∫øm'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Danh s√°ch contacts ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            contacts: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  id: { type: 'string', example: '123' },
                  name: { type: 'string', example: 'Nguy·ªÖn VƒÉn A' },
                  lastName: { type: 'string', example: 'Nguy·ªÖn' },
                  phone: { type: 'string', example: '+84901234567' },
                  email: { type: 'string', example: 'example@email.com' },
                  website: { type: 'string', example: 'https://example.com' },
                }
              }
            },
            total: { type: 'number', example: 100 },
            page: { type: 'number', example: 1 },
            limit: { type: 'number', example: 20 },
            totalPages: { type: 'number', example: 5 }
          }
        },
        timestamp: { type: 'string', example: '2025-09-10T10:30:00.000Z' }
      }
    }
  })
  @ApiResponse({ status: 500, description: 'L·ªói server' })
  async getContacts(@Query() query: ContactQueryDto) {
    try {
      this.logger.log(`üìã Getting contacts with query:`, query);
      
      const result = await this.contactsService.getContacts(query);
      
      return {
        success: true,
        data: result,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error('Error getting contacts:', error);
      throw new HttpException(
        {
          success: false,
          message: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch contacts',
          error: error.message,
          timestamp: new Date().toISOString(),
        },
        error.status || HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * L·∫•y th√¥ng tin chi ti·∫øt m·ªôt contact
   */
  @Get(':id')
  @ApiOperation({ 
    summary: 'L·∫•y th√¥ng tin contact theo ID',
    description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt contact bao g·ªìm c·∫£ th√¥ng tin ng√¢n h√†ng'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa contact', example: '123' })
  @ApiResponse({ 
    status: 200, 
    description: 'Th√¥ng tin contact ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng' 
  })
  @ApiResponse({ status: 404, description: 'Contact kh√¥ng t·ªìn t·∫°i' })
  @ApiResponse({ status: 500, description: 'L·ªói server' })
  async getContactById(@Param('id') id: string) {
    try {
      this.logger.log(`üë§ Getting contact by ID: ${id}`);
      
      const contact = await this.contactsService.getContactById(id);
      
      if (!contact) {
        throw new HttpException(
          {
            success: false,
            message: 'Contact kh√¥ng t·ªìn t·∫°i',
            timestamp: new Date().toISOString(),
          },
          HttpStatus.NOT_FOUND,
        );
      }

      return {
        success: true,
        data: contact,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(`Error getting contact ${id}:`, error);
      
      if (error instanceof HttpException) {
        throw error;
      }
      
      throw new HttpException(
        {
          success: false,
          message: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin contact',
          error: error.message,
          timestamp: new Date().toISOString(),
        },
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * Th√™m contact m·ªõi
   */
  @Post()
  @ApiOperation({ 
    summary: 'Th√™m contact m·ªõi',
    description: 'T·∫°o contact m·ªõi trong Bitrix24 v·ªõi th√¥ng tin c∆° b·∫£n v√† ng√¢n h√†ng'
  })
  @ApiBody({ type: CreateContactDto })
  @ApiResponse({ 
    status: 201, 
    description: 'Contact ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            id: { type: 'string', example: '123' },
            message: { type: 'string', example: 'Contact ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng' }
          }
        },
        timestamp: { type: 'string' }
      }
    }
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 500, description: 'L·ªói server' })
  async createContact(@Body() createContactDto: CreateContactDto) {
    try {
      this.logger.log(`‚ûï Creating new contact:`, createContactDto.name);
      
      const result = await this.contactsService.createContact(createContactDto);
      
      this.logger.log(`‚úÖ Contact created successfully with ID: ${result.id}`);
      
      return {
        success: true,
        data: {
          id: result.id,
          message: 'Contact ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
          contact: result.contact,
        },
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error('Error creating contact:', error);
      throw new HttpException(
        {
          success: false,
          message: 'Kh√¥ng th·ªÉ t·∫°o contact',
          error: error.message,
          timestamp: new Date().toISOString(),
        },
        error.status || HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * C·∫≠p nh·∫≠t contact
   */
  @Put(':id')
  @ApiOperation({ 
    summary: 'C·∫≠p nh·∫≠t contact',
    description: 'C·∫≠p nh·∫≠t th√¥ng tin contact v√† th√¥ng tin ng√¢n h√†ng trong Bitrix24'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa contact c·∫ßn c·∫≠p nh·∫≠t', example: '123' })
  @ApiBody({ type: UpdateContactDto })
  @ApiResponse({ 
    status: 200, 
    description: 'Contact ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng' 
  })
  @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá' })
  @ApiResponse({ status: 404, description: 'Contact kh√¥ng t·ªìn t·∫°i' })
  @ApiResponse({ status: 500, description: 'L·ªói server' })
  async updateContact(
    @Param('id') id: string,
    @Body() updateContactDto: UpdateContactDto,
  ) {
    try {
      this.logger.log(`‚úèÔ∏è Updating contact ${id}:`, Object.keys(updateContactDto));
      
      const result = await this.contactsService.updateContact(id, updateContactDto);
      
      this.logger.log(`‚úÖ Contact ${id} updated successfully`);
      
      return {
        success: true,
        data: {
          id: id,
          message: 'Contact ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng',
          contact: result.contact,
        },
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(`Error updating contact ${id}:`, error);
      
      if (error.message.includes('Contact not found')) {
        throw new HttpException(
          {
            success: false,
            message: 'Contact kh√¥ng t·ªìn t·∫°i',
            timestamp: new Date().toISOString(),
          },
          HttpStatus.NOT_FOUND,
        );
      }
      
      throw new HttpException(
        {
          success: false,
          message: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t contact',
          error: error.message,
          timestamp: new Date().toISOString(),
        },
        error.status || HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * X√≥a contact
   */
  @Delete(':id')
  @ApiOperation({ 
    summary: 'X√≥a contact',
    description: 'X√≥a contact v√† t·∫•t c·∫£ th√¥ng tin li√™n quan kh·ªèi Bitrix24'
  })
  @ApiParam({ name: 'id', description: 'ID c·ªßa contact c·∫ßn x√≥a', example: '123' })
  @ApiResponse({ 
    status: 200, 
    description: 'Contact ƒë∆∞·ª£c x√≥a th√†nh c√¥ng' 
  })
  @ApiResponse({ status: 404, description: 'Contact kh√¥ng t·ªìn t·∫°i' })
  @ApiResponse({ status: 500, description: 'L·ªói server' })
  async deleteContact(@Param('id') id: string) {
    try {
      this.logger.log(`üóëÔ∏è Deleting contact ${id}`);
      
      await this.contactsService.deleteContact(id);
      
      this.logger.log(`‚úÖ Contact ${id} deleted successfully`);
      
      return {
        success: true,
        data: {
          id: id,
          message: 'Contact ƒë∆∞·ª£c x√≥a th√†nh c√¥ng',
        },
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      this.logger.error(`Error deleting contact ${id}:`, error);
      
      if (error.message.includes('Contact not found')) {
        throw new HttpException(
          {
            success: false,
            message: 'Contact kh√¥ng t·ªìn t·∫°i',
            timestamp: new Date().toISOString(),
          },
          HttpStatus.NOT_FOUND,
        );
      }
      
      throw new HttpException(
        {
          success: false,
          message: 'Kh√¥ng th·ªÉ x√≥a contact',
          error: error.message,
          timestamp: new Date().toISOString(),
        },
        error.status || HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
}
